import { createOpenAI } from '@ai-sdk/openai';
import { generateObject } from 'ai';
import { z } from 'zod';
import { config } from '../config/settings';
import { Api } from 'telegram';

// –°—Ö–µ–º–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
const ThreatAnalysisSchema = z.object({
    needCall: z.boolean().describe('–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–µ–≥–∞–π–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ (—á–µ—Ä–≤–æ–Ω–∏–π –∫–æ–¥, –∫—Ä–∏—Ç–∏—á–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞)'),
    needMessage: z.boolean().describe('–ß–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (—î —Ä–∏–∑–∏–∫–∏, –∞–ª–µ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)'),
    threatLevel: z.enum(['red', 'orange', 'purple', 'yellow', 'none']).describe('–†—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏'),
    confidence: z.number().min(0).max(100).describe('–í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –≤ –æ—Ü—ñ–Ω—Ü—ñ (0-100%)'),
    reason: z.string().describe('–ö–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏ –æ—Ü—ñ–Ω–∫–∏'),
    cityMentioned: z.boolean().describe('–ß–∏ –∑–≥–∞–¥—É—î—Ç—å—Å—è –Ω–∞—à–µ –º—ñ—Å—Ç–æ')
});

export type ThreatAnalysis = z.infer<typeof ThreatAnalysisSchema>;

export class AIAnalyzerService {
    private openai: ReturnType<typeof createOpenAI> | null = null;
    private isEnabled: boolean = false;

    constructor() {
        if (config.openaiApiKey) {
            this.openai = createOpenAI({
                apiKey: config.openaiApiKey,
            });
            this.isEnabled = true;
            console.log('[AI Analyzer] ‚úÖ AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ (–º–æ–¥–µ–ª—å: gpt-4o-mini)');
        } else {
            console.log('[AI Analyzer] ‚ö†Ô∏è  AI –∞–Ω–∞–ª—ñ–∑–∞—Ç–æ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ (–Ω–µ–º–∞—î OPENAI_API_KEY)');
        }
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑—É—î –ø–∞–∫–µ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É
     */
    public async analyzeMessages(messages: Api.Message[]): Promise<ThreatAnalysis[]> {
        if (!this.isEnabled || !this.openai) {
            // Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ AI
            return messages.map(msg => this.fallbackAnalysis(msg));
        }

        try {
            // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –ø–∞–∫–µ—Ç–æ–º –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó
            const results: ThreatAnalysis[] = [];
            
            // –ì—Ä—É–ø—É—î–º–æ –ø–æ 5 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
            const batchSize = 5;
            for (let i = 0; i < messages.length; i += batchSize) {
                const batch = messages.slice(i, i + batchSize);
                const batchResults = await this.analyzeBatch(batch);
                results.push(...batchResults);
            }

            return results;
        } catch (error) {
            console.error('[AI Analyzer] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback:', error);
            // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑
            return messages.map(msg => this.fallbackAnalysis(msg));
        }
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑—É—î –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
     */
    public async analyzeMessage(message: Api.Message): Promise<ThreatAnalysis> {
        const results = await this.analyzeMessages([message]);
        return results[0];
    }

    /**
     * –ê–Ω–∞–ª—ñ–∑—É—î –ø–∞–∫–µ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —á–µ—Ä–µ–∑ AI
     */
    private async analyzeBatch(messages: Api.Message[]): Promise<ThreatAnalysis[]> {
        if (!this.openai) {
            return messages.map(msg => this.fallbackAnalysis(msg));
        }

        try {
            const messagesText = messages.map((msg, idx) => 
                `–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${idx + 1}:\n${msg.message || '[–ø—É—Å—Ç–æ]'}\n`
            ).join('\n---\n');

            const systemPrompt = `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ —Ç—Ä–∏–≤–æ–≥–∏ –≤ –£–∫—Ä–∞—ó–Ω—ñ.

üéØ –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –ù–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å –¢–Ü–õ–¨–ö–ò –º—ñ—Å—Ç–æ "${config.monitoredCity}".

‚ö†Ô∏è –ü–†–ê–í–ò–õ–û #1: –¢–û–ß–ù–ê –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê–ó–í–ò –ú–Ü–°–¢–ê
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ "–ü–∞–≤–ª–æ–≥—Ä–∞–¥" ‚â† "–î–Ω—ñ–ø—Ä–æ"
- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ "–ö—Ä–∏–≤–∏–π –†—ñ–≥" ‚â† "–î–Ω—ñ–ø—Ä–æ" (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤ –æ–±–ª–∞—Å—Ç—ñ)
- –Ø–∫—â–æ –≤ —Ç–µ–∫—Å—Ç—ñ —î –Ü–ù–®–ê –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ (–Ω–µ –Ω–∞—à–µ) ‚Üí –∑–∞–≤–∂–¥–∏ none, cityMentioned=false
- –ó–∞–≥–∞–ª—å–Ω—ñ —Ñ—Ä–∞–∑–∏ "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å" –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º—ñ—Å—Ç–∞ ‚Üí yellow

–†–Ü–í–ù–Ü –ó–ê–ì–†–û–ó–ò:
üü• –ß–ï–†–í–û–ù–ò–ô (red) - needCall=true, needMessage=false
   - –ö—Ä–∏—Ç–∏—á–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞ –¢–Ü–õ–¨–ö–ò –¥–ª—è "${config.monitoredCity}"
   - –†–∞–∫–µ—Ç–∞/—Ü—ñ–ª—å –∑–∞ 5-10 —Ö–≤–∏–ª–∏–Ω –≤—ñ–¥ –º—ñ—Å—Ç–∞ –ê–ë–û –≤–∂–µ –Ω–∞–¥ –Ω–∏–º
   - –û–±–æ–≤'—è–∑–∫–æ–≤–µ —É–∫—Ä–∏—Ç—Ç—è
   - –ü—Ä–∏–∫–ª–∞–¥–∏: "${config.monitoredCity} —á–µ—Ä–≤–æ–Ω–∏–π", "—Ä–∞–∫–µ—Ç–∞ –Ω–∞–¥ ${config.monitoredCity}", "–ö–ê–ë –ø–æ ${config.monitoredCity}"

üüß –ü–û–ú–ê–†–ê–ù–ß–ï–í–ò–ô (orange) - needMessage=true, needCall=false
   - –Ñ –∑–∞–≥—Ä–æ–∑–∞ –¥–ª—è "${config.monitoredCity}", –∞–ª–µ –¥–æ –º—ñ—Å—Ç–∞ 10-20 —Ö–≤–∏–ª–∏–Ω
   - –ê–±–æ —Ü—ñ–ª—å —Ä—É—Ö–∞—î—Ç—å—Å—è –ø–æ–≤–∑ –º—ñ—Å—Ç–æ
   - –ü—Ä–∏–∫–ª–∞–¥–∏: "${config.monitoredCity} –ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π", "—Ä–∞–∫–µ—Ç–∞ –π–¥–µ –Ω–∞ ${config.monitoredCity}"

üü™ –§–Ü–û–õ–ï–¢–û–í–ò–ô (purple) - needMessage=true, needCall=false
   - –ë–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞ (–ë–ë) –¥–ª—è "${config.monitoredCity}"
   - –ú–æ–∂–µ —Å—Ç–∞—Ç–∏ —á–µ—Ä–≤–æ–Ω–∏–º
   - –ü—Ä–∏–∫–ª–∞–¥–∏: "–ë–ë –≤ –Ω–∞–ø—Ä—è–º–∫—É ${config.monitoredCity}"

üü® –ñ–û–í–¢–ò–ô (yellow) - needMessage=false, needCall=false
   - –ú–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–∞ –∑–∞–≥—Ä–æ–∑–∞
   - –¢—Ä–∏–≤–æ–≥–∞ —î, –∞–ª–µ –¥–∞–ª–µ–∫–æ –≤—ñ–¥ –º—ñ—Å—Ç–∞
   - –ê–±–æ –∑–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±–ª–∞—Å—Ç—å
   
üü© –ù–ï–ú–ê–Ñ –ó–ê–ì–†–û–ó–ò (none) - needMessage=false, needCall=false
   - "${config.monitoredCity}" –ù–ï –∑–≥–∞–¥—É—î—Ç—å—Å—è –ê–ë–û
   - –ó–≥–∞–¥—É—î—Ç—å—Å—è –Ü–ù–®–ï –º—ñ—Å—Ç–æ (–ü–∞–≤–ª–æ–≥—Ä–∞–¥, –ö—Ä–∏–≤–∏–π –†—ñ–≥, —Ç–æ—â–æ) –ê–ë–û
   - –í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏ –ê–ë–û
   - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —ñ–Ω—à—ñ —Ä–µ–≥—ñ–æ–Ω–∏

–°–ö–û–†–û–ß–ï–ù–ù–Ø:
- –ë–ë = –±–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –±–∞–ª—ñ—Å—Ç–∏–∫–∞ (–±–∞–ª—ñ—Å—Ç–∏—á–Ω—ñ —Ä–∞–∫–µ—Ç–∏)
- –¢–¢ = —Ç–∞–∫—Ç–∏—á–Ω–∞ —Ç–∞–∫—Ç–∏–∫–∞ (–∞–≤—ñ–∞—Ü—ñ—è, –ö–ê–ë)
- –ö–ê–†/–ö–ê–ë = –∫–µ—Ä–æ–≤–∞–Ω—ñ –∞–≤—ñ–∞—Ü—ñ–π–Ω—ñ —Ä–∞–∫–µ—Ç–∏/–±–æ–º–±–∏

–õ–û–ì–Ü–ö–ê –ê–ù–ê–õ–Ü–ó–£:
1. –ü–µ—Ä–µ–≤—ñ—Ä —á–∏ –∑–≥–∞–¥—É—î—Ç—å—Å—è –¢–û–ß–ù–ê –Ω–∞–∑–≤–∞ "${config.monitoredCity}" (–∞–±–æ –î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫ —è–∫—â–æ –î–Ω—ñ–ø—Ä–æ)
2. –Ø–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –Ü–ù–®–ï –º—ñ—Å—Ç–æ ‚Üí –∑–∞–≤–∂–¥–∏ none, cityMentioned=false
3. –Ø–∫—â–æ –Ω–∞—à–µ –º—ñ—Å—Ç–æ + "—á–µ—Ä–≤–æ–Ω–∏–π/–∫—Ä–∞—Å–Ω–∏–π" ‚Üí red, needCall=true
4. –Ø–∫—â–æ –Ω–∞—à–µ –º—ñ—Å—Ç–æ + "–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π/–æ—Ä–∞–Ω–∂–µ–≤–∏–π" ‚Üí orange, needMessage=true
5. –Ø–∫—â–æ –Ω–∞—à–µ –º—ñ—Å—Ç–æ + "—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π/—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π" –∞–±–æ "–ë–ë" ‚Üí purple, needMessage=true
6. –Ø–∫—â–æ –≤—ñ–¥–±—ñ–π –¥–ª—è –Ω–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞ ‚Üí none
7. –Ø–∫—â–æ –¢–Ü–õ–¨–ö–ò –æ–±–ª–∞—Å—Ç—å –±–µ–∑ –º—ñ—Å—Ç–∞ ‚Üí yellow

–ê–Ω–∞–ª—ñ–∑—É–π –ö–û–ñ–ù–ï –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º–æ —ñ –ø–æ–≤–µ—Ä—Ç–∞–π –º–∞—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.`;

            const { object } = await generateObject({
                model: this.openai.chat('gpt-4o-mini'),
                schema: z.object({
                    analyses: z.array(ThreatAnalysisSchema)
                }),
                prompt: messagesText,
                system: systemPrompt,
                temperature: 0.3, // –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±—ñ–ª—å—à –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                maxTokens: 2000,
            });

            // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            object.analyses.forEach((analysis, idx) => {
                const emoji = this.getThreatEmoji(analysis.threatLevel);
                console.log(`[AI Analyzer] ${emoji} –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${idx + 1}: ${analysis.threatLevel} (${analysis.confidence}%) - ${analysis.reason}`);
            });

            return object.analyses;
        } catch (error: any) {
            console.error('[AI Analyzer] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –±–∞—Ç—á–∞:', error.message || error);
            // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ AI –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
            return messages.map(msg => this.fallbackAnalysis(msg));
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –±–µ–∑ AI (fallback)
     */
    private fallbackAnalysis(message: Api.Message): ThreatAnalysis {
        const text = (message.message || '').toLowerCase();
        const cityNormalized = config.monitoredCity.toLowerCase();
        
        // –í–∞—Ä—ñ–∞–Ω—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –º—ñ—Å—Ç–∞
        const cityVariants = ['–¥–Ω—ñ–ø—Ä–æ', '–¥–Ω–µ–ø—Ä', '–¥–Ω–∏–ø—Ä–æ', '–¥–Ω—ñ–ø—Ä', 'dnipro'];
        const cityMentioned = cityVariants.some(variant => text.includes(variant));

        if (!cityMentioned) {
            return {
                needCall: false,
                needMessage: false,
                threatLevel: 'none',
                confidence: 80,
                reason: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è',
                cityMentioned: false
            };
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–∞–≥—Ä–æ–∑–∏
        if (text.includes('—á–µ—Ä–≤–æ–Ω') || text.includes('–∫—Ä–∞—Å–Ω') || 
            text.includes('–∫—Ä–∏—Ç–∏—á') || text.includes('–Ω–∞–¥ –≥–æ—Ä–æ–¥')) {
            return {
                needCall: true,
                needMessage: true,
                threatLevel: 'red',
                confidence: 70,
                reason: '–ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–¥ –¥–ª—è –º—ñ—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑)',
                cityMentioned: true
            };
        }

        if (text.includes('–ø–æ–º–∞—Ä–∞–Ω—á–µ–≤') || text.includes('–æ—Ä–∞–Ω–∂–µ–≤')) {
            return {
                needCall: false,
                needMessage: true,
                threatLevel: 'orange',
                confidence: 70,
                reason: '–ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π –∫–æ–¥ –¥–ª—è –º—ñ—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑)',
                cityMentioned: true
            };
        }

        if (text.includes('—Ñ—ñ–æ–ª–µ—Ç–æ–≤') || text.includes('—Ñ–∏–æ–ª–µ—Ç–æ–≤') || 
            text.includes(' –±–± ') || text.includes('–±–∞–ª—ñ—Å—Ç')) {
            return {
                needCall: false,
                needMessage: true,
                threatLevel: 'purple',
                confidence: 70,
                reason: '–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π –∫–æ–¥ / –ë–ë –¥–ª—è –º—ñ—Å—Ç–∞ (–ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑)',
                cityMentioned: true
            };
        }

        if (text.includes('–≤—ñ–¥–±—ñ–π') || text.includes('–æ—Ç–±–æ–π') || text.includes('—Å–∫–∞—Å–æ–≤')) {
            return {
                needCall: false,
                needMessage: false,
                threatLevel: 'none',
                confidence: 80,
                reason: '–í—ñ–¥–±—ñ–π —Ç—Ä–∏–≤–æ–≥–∏',
                cityMentioned: true
            };
        }

        // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∂–æ–≤—Ç–∏–π (–º—ñ—Å—Ç–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è, –∞–ª–µ –Ω–µ–º–∞—î —è–≤–Ω–æ—ó –∑–∞–≥—Ä–æ–∑–∏)
        return {
            needCall: false,
            needMessage: false,
            threatLevel: 'yellow',
            confidence: 60,
            reason: '–ú—ñ—Å—Ç–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è, –∞–ª–µ –∑–∞–≥—Ä–æ–∑–∞ –Ω–µ—è—Å–Ω–∞ (–ø—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑)',
            cityMentioned: true
        };
    }

    private getThreatEmoji(level: string): string {
        switch (level) {
            case 'red': return 'üü•';
            case 'orange': return 'üüß';
            case 'purple': return 'üü™';
            case 'yellow': return 'üü®';
            default: return 'üü©';
        }
    }
}

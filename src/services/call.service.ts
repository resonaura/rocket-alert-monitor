import { TelegramClientService } from './telegram-client.service';
import { config } from '../config/settings';

export class CallService {
    private telegramService: TelegramClientService;

    constructor(telegramService: TelegramClientService) {
        this.telegramService = telegramService;
    }

    public async makeCall(): Promise<void> {
        console.log(`[CallService] üìû –ü–æ—á–∏–Ω–∞—î–º–æ —Å–µ—Ä—ñ—é –¥–∑–≤—ñ–Ω–∫—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${config.callUserId}`);
        
        for (let attempt = 1; attempt <= config.callMaxRetries; attempt++) {
            console.log(`[CallService] –°–ø—Ä–æ–±–∞ ${attempt} –∑ ${config.callMaxRetries}...`);
            
            const callSuccessful = await this.initiateCall();
            
            if (callSuccessful) {
                console.log('[CallService] ‚úÖ –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ!');
                return;
            }
            
            if (attempt < config.callMaxRetries) {
                console.log(`[CallService] –î–∑–≤—ñ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ. –ß–µ–∫–∞—î–º–æ ${config.callRetryInterval / 1000} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...`);
                await this.waitForResponse();
            }
        }
        
        // –Ø–∫—â–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ–≤–¥–∞–ª—ñ - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        console.log('[CallService] ‚ùå –£—Å—ñ —Å–ø—Ä–æ–±–∏ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ');
        await this.sendFailureMessage();
    }

    private async initiateCall(): Promise<boolean> {
        try {
            const result = await this.telegramService.makeCall(config.callUserId);
            
            if (!result.success) {
                console.log('[CallService] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ—é–≤–∞—Ç–∏ –¥–∑–≤—ñ–Ω–æ–∫');
                return false;
            }
            
            // –Ø–∫—â–æ –¥–∑–≤—ñ–Ω–æ–∫ –≤–∂–µ –ø—Ä–∏–π–Ω—è—Ç–æ - –≤—ñ–¥–º—ñ–Ω–Ω–æ!
            if (result.answered) {
                console.log('[CallService] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫!');
                return true;
            }
            
            // –Ü–Ω–∞–∫—à–µ —á–µ–∫–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            console.log(`[CallService] ‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (${config.callTimeout / 1000} —Å–µ–∫—É–Ω–¥)...`);
            
            // –ß–µ–∫–∞—î–º–æ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            await this.delay(config.callTimeout);
            
            // –ü—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–µ —Ä–∞–∑ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—ñ API –º–æ–∂–µ –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å)
            // –ê–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏ –≤–≤–∞–∂–∞—î–º–æ —â–æ —è–∫—â–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤ –æ–¥—Ä–∞–∑—É - –∑–Ω–∞—á–∏—Ç—å –Ω–µ –ø—Ä–∏–π–Ω—è–≤
            console.log('[CallService] ‚è±Ô∏è –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ, –¥–∑–≤—ñ–Ω–æ–∫ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ');
            return false;
            
        } catch (error) {
            console.error('[CallService] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –¥–∑–≤—ñ–Ω–∫–∞:', error);
            return false;
        }
    }

    private waitForResponse(): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, config.callRetryInterval));
    }

    private delay(ms: number): Promise<void> {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    private async sendFailureMessage(): Promise<void> {
        const message = 'üö® –¢–†–ï–í–û–ì–ê! –ú–∏ –Ω–∞–º–∞–≥–∞–ª–∏—Å—è —Ç–µ–±–µ —Ä–æ–∑–±—É–¥–∏—Ç–∏ –¥–∑–≤—ñ–Ω–∫–∞–º–∏, –∞–ª–µ –Ω–µ –≤–∏–π—à–ª–æ. –ü–µ—Ä–µ–≤—ñ—Ä –∫–∞–Ω–∞–ª —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ —Ä–∞–∫–µ—Ç–Ω—É –Ω–µ–±–µ–∑–ø–µ–∫—É!';
        
        try {
            await this.telegramService.sendMessage(config.callUserId, message);
            console.log('[CallService] üìß –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤–¥–∞–ª—ñ —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('[CallService] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    }
}
import { Logger, TelegramClient } from 'telegram';
import { StoreSession } from 'telegram/sessions';
import { Api } from 'telegram';
import { LogLevel } from 'telegram/extensions/Logger';
import { input } from '@inquirer/prompts';
import { config } from '../config/settings';
import { Storage } from '../utils/storage';
import * as crypto from 'crypto';

export class TelegramClientService {
    private client: TelegramClient;
    private isConnected: boolean = false;

    constructor() {
        const session = new StoreSession('.session');
        this.client = new TelegramClient(session, config.apiId, config.apiHash, {
            connectionRetries: 5,
            baseLogger: new Logger(LogLevel.WARN)
        });
    }

    public async connect(): Promise<void> {
        console.log('[Telegram] –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram...');
        
        await this.client.start({
            phoneNumber: async () => await input({ message: '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ' }),
            password: async () => await input({ message: '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å 2FA: ' }),
            phoneCode: async () => await input({ message: '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –∑ Telegram: ' }),
            onError: (err: Error) => console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', err),
        });

        this.isConnected = true;
        console.log('[Telegram] –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        await this.ensureChannelSubscription();
    }

    private async ensureChannelSubscription(): Promise<void> {
        try {
            const channelEntity = await this.client.getEntity(config.channelId);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
            const result = await this.client.invoke(
                new Api.channels.GetParticipant({
                    channel: channelEntity,
                    participant: 'me'
                })
            );

            console.log('[Telegram] –í–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫–∞–Ω–∞–ª');
        } catch (error: any) {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
            if (error.errorMessage === 'USER_NOT_PARTICIPANT') {
                console.log('[Telegram] –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –∫–∞–Ω–∞–ª...');
                try {
                    await this.client.invoke(
                        new Api.channels.JoinChannel({
                            channel: await this.client.getEntity(config.channelId)
                        })
                    );
                    console.log('[Telegram] –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª!');
                } catch (joinError) {
                    console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–ø–∏—Å—Ü—ñ –Ω–∞ –∫–∞–Ω–∞–ª:', joinError);
                }
            } else {
                console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏:', error);
            }
        }
    }

    public async getNewMessages(): Promise<Api.Message[]> {
        if (!this.isConnected) {
            throw new Error('Telegram client is not connected');
        }

        try {
            const channel = await this.client.getEntity(config.channelId);
            const lastCheckedId = Storage.getLastCheckedMessageId();

            // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const messages = await this.client.getMessages(channel, {
                limit: 20,
                minId: lastCheckedId || undefined
            });

            const newMessages: Api.Message[] = [];
            
            for (const msg of messages) {
                if (msg instanceof Api.Message && msg.id) {
                    if (!lastCheckedId || msg.id > lastCheckedId) {
                        if (!Storage.isMessageProcessed(msg.id)) {
                            newMessages.push(msg);
                            Storage.addProcessedMessage(msg.id);
                        }
                    }
                    
                    // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏–π ID
                    if (!lastCheckedId || msg.id > lastCheckedId) {
                        Storage.setLastCheckedMessageId(msg.id);
                    }
                }
            }

            return newMessages.reverse(); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—á–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
        } catch (error) {
            console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
            return [];
        }
    }

    public async makeCall(userId: number): Promise<{ success: boolean; answered: boolean }> {
        try {
            console.log(`[Telegram] –¢–µ–ª–µ—Ñ–æ–Ω—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${userId}...`);
            
            const userEntity = await this.client.getEntity(userId);
            
            // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π ID –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞ (–≤ –º–µ–∂–∞—Ö signed int32)
            const randomId = Math.floor(Math.random() * 0x7FFFFFFF);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ g_a hash (SHA-256 –≤—ñ–¥ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö)
            const gA = crypto.randomBytes(256);
            const gAHash = crypto.createHash('sha256').update(gA).digest();
            
            // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ requestCall –¥–ª—è –¥–∑–≤—ñ–Ω–∫–∞
            const result = await this.client.invoke(
                new Api.phone.RequestCall({
                    userId: userEntity,
                    randomId: randomId,
                    gAHash: gAHash,
                    protocol: new Api.PhoneCallProtocol({
                        minLayer: 65,
                        maxLayer: 92,
                        udpP2p: true,
                        udpReflector: true,
                        libraryVersions: []
                    })
                })
            );

            console.log('[Telegram] –î–∑–≤—ñ–Ω–æ–∫ —ñ–Ω—ñ—Ü—ñ–π–æ–≤–∞–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.className);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result instanceof Api.phone.PhoneCall) {
                const phoneCall = result.phoneCall;
                let callId: any;
                let accessHash: any;
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –¥–∑–≤—ñ–Ω–∫–∞ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
                if (phoneCall instanceof Api.PhoneCallRequested || 
                    phoneCall instanceof Api.PhoneCallWaiting ||
                    phoneCall instanceof Api.PhoneCallAccepted) {
                    callId = phoneCall.id;
                    accessHash = phoneCall.accessHash;
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–∑–≤—ñ–Ω–∫–∞
                if (phoneCall instanceof Api.PhoneCallAccepted) {
                    console.log('[Telegram] ‚úÖ –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º!');
                    // –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ –±–æ –º–µ—Ç–∞ –¥–æ—Å—è–≥–Ω—É—Ç–∞
                    await this.discardCall(callId, accessHash);
                    return { success: true, answered: true };
                } else if (phoneCall instanceof Api.PhoneCallRequested || 
                           phoneCall instanceof Api.PhoneCallWaiting) {
                    console.log('[Telegram] –î–∑–≤—ñ–Ω–æ–∫ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
                    
                    const waitTime = config.callTimeout;
                    console.log(`[Telegram] –û—á—ñ–∫—É—î–º–æ ${waitTime / 1000} —Å–µ–∫—É–Ω–¥...`);
                    
                    // –ß–µ–∫–∞—î–º–æ –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –¥–∑–≤—ñ–Ω–∫–∞ —á–µ—Ä–µ–∑ updates
                    let callAnswered = false;
                    let callDiscarded = false;
                    
                    const updateHandler = (update: any) => {
                        if (update instanceof Api.UpdatePhoneCall) {
                            const phoneCall = update.phoneCall;
                            
                            if (phoneCall.id?.equals(callId)) {
                                if (phoneCall instanceof Api.PhoneCallAccepted) {
                                    console.log('[Telegram] üìû –î–∑–≤—ñ–Ω–æ–∫ –ø—Ä–∏–π–Ω—è—Ç–æ!');
                                    callAnswered = true;
                                } else if (phoneCall instanceof Api.PhoneCallDiscarded) {
                                    console.log('[Telegram] üìµ –î–∑–≤—ñ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ/–≤—ñ–¥—Ö–∏–ª–µ–Ω–æ');
                                    callDiscarded = true;
                                }
                            }
                        }
                    };
                    
                    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                    this.client.addEventHandler(updateHandler);
                    
                    // –ß–µ–∫–∞—î–º–æ –∑ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é —Å—Ç–∞—Ç—É—Å—É
                    const startTime = Date.now();
                    while (Date.now() - startTime < waitTime && !callAnswered && !callDiscarded) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                    
                    const timeElapsed = Date.now() - startTime;
                    
                    // –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫ —è–∫—â–æ –≤—ñ–Ω —â–µ –∞–∫—Ç–∏–≤–Ω–∏–π
                    if (!callDiscarded) {
                        console.log('[Telegram] –ó–∞–≤–µ—Ä—à—É—î–º–æ –¥–∑–≤—ñ–Ω–æ–∫...');
                        await this.discardCall(callId, accessHash);
                    }
                    
                    // –Ø–∫—â–æ –¥–∑–≤—ñ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è —Ä–∞–Ω—ñ—à–µ —Ç–∞–π–º–∞—É—Ç—É - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤/–ø—Ä–æ–∫–∏–Ω—É–≤—Å—è
                    if (callAnswered || (callDiscarded && timeElapsed < waitTime)) {
                        console.log('[Telegram] ‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤ –Ω–∞ –¥–∑–≤—ñ–Ω–æ–∫ (–ø—Ä–æ–∫–∏–Ω—É–≤—Å—è)!');
                        return { success: true, answered: true };
                    } else {
                        console.log('[Telegram] ‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–≤');
                        return { success: true, answered: false };
                    }
                } else if (phoneCall instanceof Api.PhoneCallDiscarded) {
                    console.log('[Telegram] ‚ùå –î–∑–≤—ñ–Ω–æ–∫ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–±–æ –Ω–µ –ø—Ä–∏–π–Ω—è—Ç–æ');
                    return { success: true, answered: false };
                }
            }

            return { success: true, answered: false };
        } catch (error: any) {
            console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–∑–≤—ñ–Ω–∫—É:', error.errorMessage || error);
            return { success: false, answered: false };
        }
    }

    private async discardCall(callId: any, accessHash: any): Promise<void> {
        try {
            await this.client.invoke(
                new Api.phone.DiscardCall({
                    peer: new Api.InputPhoneCall({
                        id: callId,
                        accessHash: accessHash
                    }),
                    duration: 1,
                    reason: new Api.PhoneCallDiscardReasonHangup(),
                    connectionId: 0 as any
                })
            );
            console.log('[Telegram] –î–∑–≤—ñ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
        } catch (error) {
            console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –¥–∑–≤—ñ–Ω–∫–∞:', error);
        }
    }

    public async sendMessage(userId: number, message: string): Promise<void> {
        try {
            console.log(`[Telegram] –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É ${userId}...`);
            
            await this.client.sendMessage(userId, { message });
            
            console.log('[Telegram] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
        } catch (error) {
            console.error('[Telegram] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
        }
    }

    public async disconnect(): Promise<void> {
        if (this.isConnected) {
            await this.client.disconnect();
            this.isConnected = false;
            console.log('[Telegram] –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ Telegram');
        }
    }

    public getClient(): TelegramClient {
        return this.client;
    }
}
